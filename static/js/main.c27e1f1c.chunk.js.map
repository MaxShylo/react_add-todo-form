{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","TodoList","todos","map","classNames","completed","getUser","userId","usersFromServer","find","App","useState","todoInfo","setTodoInfo","selectedUserId","setSelectedUserId","isError","setError","currentTodos","setTodos","action","method","onSubmit","event","preventDefault","Error","newTodos","length","type","value","onChange","message","target","replace","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c27e1f1c.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const { title, user } = todo;\n\n  return (\n    <>\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {\n        user && (\n          <UserInfo user={user} />\n        )\n      }\n    </>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <article\n          data-id={todo.id}\n          className={classNames(\n            'TodoInfo',\n            { 'TodoInfo--completed': todo.completed },\n          )}\n          key={todo.id}\n        >\n          <TodoInfo todo={todo} />\n        </article>\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './components/types/Todo';\nimport { User } from './components/types/User';\nimport { TodoList } from './components/TodoList';\n\nconst getUser = (userId: number): User | null => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nconst todos: Todo[] = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: getUser(todo.userId),\n  };\n});\n\nexport const App: React.FC = () => {\n  const [todoInfo, setTodoInfo] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState('0');\n  const [isError, setError] = useState(false);\n  const [currentTodos, setTodos] = useState(todos);\n\n  const reset = () => {\n    setTodoInfo('');\n    setSelectedUserId('0');\n    setError(false);\n  };\n\n  const handleTodoInfo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const message = event.target.value.replace(/[^a-zа-яієїґ\\s\\d]/gi, '');\n\n    setTodoInfo(message);\n  };\n\n  const handleUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUserId(value);\n  };\n\n  const addNewTodos = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!todoInfo) {\n      setError(true);\n      throw new Error('Please enter a title');\n    }\n\n    if (selectedUserId === '0') {\n      setError(true);\n      throw new Error('Choose a user');\n    }\n\n    const newTodos: Todo = {\n      id: currentTodos.length + 1,\n      title: todoInfo,\n      completed: false,\n      userId: +selectedUserId,\n      user: getUser(+selectedUserId),\n    };\n\n    setTodos(() => [\n      ...currentTodos,\n      newTodos,\n    ]);\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addNewTodos}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n\n            {' '}\n\n            <input\n              type=\"text\"\n              value={todoInfo}\n              onChange={handleTodoInfo}\n              placeholder=\"Enter a title\"\n              data-cy=\"titleInput\"\n            />\n            {(isError && !todoInfo) && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n\n            {' '}\n\n            <select\n              name=\"selectedUser\"\n              data-cy=\"userSelect\"\n              value={selectedUserId}\n              onChange={handleUserId}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(user => {\n                const { id, name } = user;\n\n                return (\n                  <option\n                    value={id}\n                    key={id}\n                  >\n                    {name}\n                  </option>\n                );\n              })}\n            </select>\n            {(isError && selectedUserId === '0') && (\n              <span className=\"error\">Please choose a user</span>\n            )}\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}